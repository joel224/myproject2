{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mockData.ts"],"sourcesContent":["import type { Patient, Appointment, TreatmentPlan, ProgressNote, StaffMember, Invoice } from './types';\n\nexport const mockPatients: Patient[] = [\n  { id: 'pat1', name: 'Alice Wonderland', email: 'alice@example.com', dateOfBirth: '1990-05-15', phone: '555-0101' },\n  { id: 'pat2', name: 'Bob The Builder', email: 'bob@example.com', dateOfBirth: '1985-11-20', phone: '555-0102' },\n  { id: 'pat3', name: 'Charlie Brown', email: 'charlie@example.com', dateOfBirth: '2000-01-30', phone: '555-0103' },\n];\n\nexport const mockStaff: StaffMember[] = [\n  { id: 'doc1', name: 'Dr. Loji', role: 'Dentist', email: 'drloji@example.com' },\n  { id: 'staff1', name: 'Sarah Miller', role: 'Receptionist', email: 'sarah@example.com' },\n  { id: 'hyg1', name: 'Mike Ross', role: 'Hygienist', email: 'mike@example.com' },\n];\n\nexport const mockAppointments: Appointment[] = [\n  { id: 'apt1', patientId: 'pat1', patientName: 'Alice Wonderland', doctorId: 'doc1', doctorName: 'Dr. Loji', date: new Date().toISOString().split('T')[0], time: '10:00 AM', type: 'Check-up', status: 'Scheduled' },\n  { id: 'apt2', patientId: 'pat2', patientName: 'Bob The Builder', doctorId: 'doc1', doctorName: 'Dr. Loji', date: new Date(Date.now() + 86400000).toISOString().split('T')[0], time: '02:30 PM', type: 'Cleaning', status: 'Confirmed' },\n  { id: 'apt3', patientId: 'pat1', patientName: 'Alice Wonderland', doctorId: 'doc1', doctorName: 'Dr. Loji', date: new Date(Date.now() - 86400000 * 5).toISOString().split('T')[0], time: '09:00 AM', type: 'Filling', status: 'Completed' },\n];\n\nexport const mockTreatmentPlans: TreatmentPlan[] = [\n  {\n    id: 'tp1',\n    patientId: 'pat1',\n    doctorId: 'doc1',\n    title: 'Comprehensive Oral Care Plan',\n    procedures: [\n      { id: 'proc1', name: 'Full Mouth X-Ray', cost: 150 },\n      { id: 'proc2', name: 'Deep Cleaning (Scaling & Root Planing)', cost: 400 },\n      { id: 'proc3', name: 'Fluoride Treatment', cost: 50 },\n    ],\n    startDate: new Date(Date.now() - 86400000 * 10).toISOString().split('T')[0],\n    status: 'Active',\n    totalCost: 600,\n  },\n  {\n    id: 'tp2',\n    patientId: 'pat2',\n    doctorId: 'doc1',\n    title: 'Implant Placement - Phase 1',\n    procedures: [{ id: 'proc4', name: 'Dental Implant Surgery (Single Tooth)', cost: 2000 }],\n    startDate: new Date().toISOString().split('T')[0],\n    status: 'Active',\n    totalCost: 2000,\n  },\n];\n\nexport const mockProgressNotes: ProgressNote[] = [\n  {\n    id: 'pn1',\n    patientId: 'pat1',\n    treatmentPlanId: 'tp1',\n    doctorId: 'doc1',\n    date: new Date(Date.now() - 86400000 * 9).toISOString().split('T')[0],\n    time: '10:30 AM',\n    note: 'Initial consultation. Discussed treatment plan. Patient agreeable. Full mouth X-rays taken.',\n    images: [{ id: 'img1', url: 'https://placehold.co/300x200.png', caption: 'X-Ray Left Side' }],\n    progressStage: 'Initial Assessment',\n  },\n  {\n    id: 'pn2',\n    patientId: 'pat1',\n    treatmentPlanId: 'tp1',\n    doctorId: 'doc1',\n    date: new Date(Date.now() - 86400000 * 2).toISOString().split('T')[0],\n    time: '11:00 AM',\n    note: 'Deep cleaning performed on upper quadrant. Patient tolerated well. Advised on post-op care.',\n    progressStage: 'Procedure Day 1',\n  },\n];\n\nexport const mockInvoices: Invoice[] = [\n    { \n        id: 'inv1', \n        patientId: 'pat1', \n        date: new Date(Date.now() - 86400000 * 10).toISOString().split('T')[0], \n        dueDate: new Date(Date.now() + 86400000 * 20).toISOString().split('T')[0],\n        items: [\n            { description: 'Full Mouth X-Ray', quantity: 1, unitPrice: 150, totalPrice: 150 },\n            { description: 'Deep Cleaning (Scaling & Root Planing)', quantity: 1, unitPrice: 400, totalPrice: 400 },\n        ], \n        totalAmount: 550, \n        amountPaid: 200, \n        status: 'Partial' \n    },\n    { \n        id: 'inv2', \n        patientId: 'pat2', \n        date: new Date().toISOString().split('T')[0], \n        dueDate: new Date(Date.now() + 86400000 * 30).toISOString().split('T')[0],\n        items: [\n            { description: 'Dental Implant Surgery (Single Tooth) - Deposit', quantity: 1, unitPrice: 1000, totalPrice: 1000 },\n        ], \n        totalAmount: 1000, \n        amountPaid: 0, \n        status: 'Pending' \n    },\n];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mockServerDb.ts"],"sourcesContent":["\n// src/lib/mockServerDb.ts\nimport type { Patient, Appointment, TreatmentPlan, ProgressNote, Invoice, StaffMember } from './types';\nimport { \n  mockPatients as initialPatients, \n  mockAppointments as initialAppointments, \n  mockTreatmentPlans as initialTreatmentPlans, \n  mockProgressNotes as initialProgressNotes, \n  mockInvoices as initialInvoices, \n  mockStaff as initialStaff \n} from './mockData';\nimport type { NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';\n\n// Define a more complete User type for authentication purposes\nexport interface UserAuth {\n  id: string;\n  name: string;\n  email: string;\n  passwordHash: string; // Store \"hashed\" passwords (simulated)\n  role: 'patient' | 'doctor' | 'staff' | 'hygienist' | 'admin' | 'assistant'; // Expanded roles\n  resetToken?: string;\n  resetTokenExpiry?: Date;\n  // Patient specific details can be linked via ID or stored directly if simple\n  dateOfBirth?: string;\n  phone?: string;\n  age?: number;\n  medicalRecords?: string;\n  xrayImageUrls?: string[];\n  hasDiabetes?: boolean;\n  hasHighBloodPressure?: boolean;\n  hasStrokeOrHeartAttackHistory?: boolean;\n  hasBleedingDisorders?: boolean;\n  hasAllergy?: boolean;\n  allergySpecifics?: string;\n  hasAsthma?: boolean;\n}\n\n// Simulating a \"database\" in memory\nconst users: UserAuth[] = [\n  // Pre-populate some users if needed for consistent IDs with mockStaff\n  // Example: { id: 'doc1', name: 'Dr. Loji', email: 'dr.loji@dentalhub.com', passwordHash: '...', role: 'doctor' },\n];\n\n// Make copies of imported arrays so we can mutate them\n// Update patients to include new fields, ensuring they can be undefined initially\nlet patients: Patient[] = JSON.parse(JSON.stringify(initialPatients.map(p => ({\n  ...p, \n  userId: users.find(u => u.email === p.email)?.id || p.id,\n  age: p.dateOfBirth ? new Date().getFullYear() - new Date(p.dateOfBirth).getFullYear() : undefined, // Example age calculation\n  medicalRecords: undefined,\n  xrayImageUrls: [],\n  hasDiabetes: false,\n  hasHighBloodPressure: false,\n  hasStrokeOrHeartAttackHistory: false,\n  hasBleedingDisorders: false,\n  hasAllergy: false,\n  allergySpecifics: undefined,\n  hasAsthma: false,\n}))));\n\nlet appointments: Appointment[] = JSON.parse(JSON.stringify(initialAppointments));\nlet treatmentPlans: TreatmentPlan[] = JSON.parse(JSON.stringify(initialTreatmentPlans));\nlet progressNotes: ProgressNote[] = JSON.parse(JSON.stringify(initialProgressNotes));\nlet invoices: Invoice[] = JSON.parse(JSON.stringify(initialInvoices));\nlet staff: StaffMember[] = JSON.parse(JSON.stringify(initialStaff)); // Initialize staff array\n\nlet clinicWaitTime = { text: \"<10 mins\", updatedAt: new Date().toISOString() };\n\nexport const db = {\n  users, \n  patients,\n  appointments,\n  treatmentPlans,\n  progressNotes,\n  invoices,\n  clinicWaitTime,\n  staff, // Include staff in the mutable db object\n};\n\n// Helper to generate unique IDs (very basic for mock)\nexport function generateId(prefix: string = 'id_') {\n  return prefix + Math.random().toString(36).substr(2, 9);\n}\n\n// Mock middleware for authorization (conceptual)\nexport async function authorize(req: NextRequest, requiredRole?: UserAuth['role'] | UserAuth['role'][]) {\n  const mockSessionToken = req.cookies.get('sessionToken')?.value;\n  if (!mockSessionToken) {\n    return { authorized: false, user: null, error: NextResponse.json({ message: 'Unauthorized: No session token' }, { status: 401 }) };\n  }\n\n  const [userId, userRoleFromToken] = mockSessionToken.split(':');\n  \n  const user = db.users.find(u => u.id === userId && u.role === (userRoleFromToken as UserAuth['role']));\n  // In a real scenario, you'd fetch user from actual DB by session.\n\n  if (!user) {\n    return { authorized: false, user: null, error: NextResponse.json({ message: 'Unauthorized: Invalid session' }, { status: 401 }) };\n  }\n\n  const rolesToCheck = Array.isArray(requiredRole) ? requiredRole : (requiredRole ? [requiredRole] : []);\n\n  if (rolesToCheck.length > 0 && !rolesToCheck.includes(user.role)) {\n    // Allow doctors to access staff routes as a special case\n    if (user.role === 'doctor' && rolesToCheck.includes('staff')) {\n      // This is fine\n    } else {\n       return { authorized: false, user: null, error: NextResponse.json({ message: 'Forbidden: Insufficient permissions' }, { status: 403 }) };\n    }\n  }\n  \n  return { authorized: true, user: user, error: null };\n}\n"],"names":[],"mappings":"AACA,0BAA0B;;;;;;AAE1B;AASA;;;AA0BA,oCAAoC;AACpC,MAAM,QAAoB,EAGzB;AAED,uDAAuD;AACvD,kFAAkF;AAClF,IAAI,WAAsB,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,wHAAA,CAAA,eAAe,CAAC,GAAG,CAAC,CAAA,IAAK,CAAC;QAC5E,GAAG,CAAC;QACJ,QAAQ,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,EAAE,KAAK,GAAG,MAAM,EAAE,EAAE;QACxD,KAAK,EAAE,WAAW,GAAG,IAAI,OAAO,WAAW,KAAK,IAAI,KAAK,EAAE,WAAW,EAAE,WAAW,KAAK;QACxF,gBAAgB;QAChB,eAAe,EAAE;QACjB,aAAa;QACb,sBAAsB;QACtB,+BAA+B;QAC/B,sBAAsB;QACtB,YAAY;QACZ,kBAAkB;QAClB,WAAW;IACb,CAAC;AAED,IAAI,eAA8B,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,wHAAA,CAAA,mBAAmB;AAC/E,IAAI,iBAAkC,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,wHAAA,CAAA,qBAAqB;AACrF,IAAI,gBAAgC,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,wHAAA,CAAA,oBAAoB;AAClF,IAAI,WAAsB,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,wHAAA,CAAA,eAAe;AACnE,IAAI,QAAuB,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,wHAAA,CAAA,YAAY,IAAI,yBAAyB;AAE9F,IAAI,iBAAiB;IAAE,MAAM;IAAY,WAAW,IAAI,OAAO,WAAW;AAAG;AAEtE,MAAM,KAAK;IAChB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACF;AAGO,SAAS,WAAW,SAAiB,KAAK;IAC/C,OAAO,SAAS,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG;AACvD;AAGO,eAAe,UAAU,GAAgB,EAAE,YAAoD;IACpG,MAAM,mBAAmB,IAAI,OAAO,CAAC,GAAG,CAAC,iBAAiB;IAC1D,IAAI,CAAC,kBAAkB;QACrB,OAAO;YAAE,YAAY;YAAO,MAAM;YAAM,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAiC,GAAG;gBAAE,QAAQ;YAAI;QAAG;IACnI;IAEA,MAAM,CAAC,QAAQ,kBAAkB,GAAG,iBAAiB,KAAK,CAAC;IAE3D,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,UAAU,EAAE,IAAI,KAAM;IAC/D,kEAAkE;IAElE,IAAI,CAAC,MAAM;QACT,OAAO;YAAE,YAAY;YAAO,MAAM;YAAM,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QAAG;IAClI;IAEA,MAAM,eAAe,MAAM,OAAO,CAAC,gBAAgB,eAAgB,eAAe;QAAC;KAAa,GAAG,EAAE;IAErG,IAAI,aAAa,MAAM,GAAG,KAAK,CAAC,aAAa,QAAQ,CAAC,KAAK,IAAI,GAAG;QAChE,yDAAyD;QACzD,IAAI,KAAK,IAAI,KAAK,YAAY,aAAa,QAAQ,CAAC,UAAU;QAC5D,eAAe;QACjB,OAAO;YACJ,OAAO;gBAAE,YAAY;gBAAO,MAAM;gBAAM,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,SAAS;gBAAsC,GAAG;oBAAE,QAAQ;gBAAI;YAAG;QACzI;IACF;IAEA,OAAO;QAAE,YAAY;QAAM,MAAM;QAAM,OAAO;IAAK;AACrD","debugId":null}},
    {"offset": {"line": 551, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/upload/image/route.ts"],"sourcesContent":["\n// src/app/api/upload/image/route.ts\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { Storage } from '@google-cloud/storage';\nimport { generateId } from '@/lib/mockServerDb'; // Using this for unique filenames\n\n// Initialize GCS Storage client\n// It will automatically use credentials from GOOGLE_APPLICATION_CREDENTIALS environment variable\nlet storage: Storage;\ntry {\n  storage = new Storage();\n} catch (error) {\n  console.error(\"Failed to initialize Google Cloud Storage client:\", error);\n  // If storage client fails to initialize, subsequent calls will fail.\n  // Consider how to handle this globally or per request.\n}\n\n\nconst GCS_BUCKET_NAME = process.env.GCS_BUCKET_NAME;\n\nexport async function POST(request: NextRequest) {\n  if (!storage) {\n    console.error('GCS Storage client not initialized. Check GOOGLE_APPLICATION_CREDENTIALS.');\n    return NextResponse.json({ message: \"Server configuration error for file uploads.\" }, { status: 500 });\n  }\n  if (!GCS_BUCKET_NAME) {\n    console.error('GCS_BUCKET_NAME environment variable is not set.');\n    return NextResponse.json({ message: \"Server configuration error: Bucket name missing.\" }, { status: 500 });\n  }\n\n  try {\n    const formData = await request.formData();\n    const file = formData.get('imageFile') as File | null;\n\n    if (!file) {\n      return NextResponse.json({ message: \"No file provided\" }, { status: 400 });\n    }\n\n    // Updated file type validation\n    const allowedTypes = [\n        'image/jpeg', \n        'image/png', \n        'image/webp', \n        'image/gif',\n        'application/pdf'\n    ];\n    if (!allowedTypes.includes(file.type)) {\n      return NextResponse.json({ message: `Invalid file type: ${file.type}. Allowed types: JPG, PNG, WEBP, GIF, PDF.` }, { status: 400 });\n    }\n    \n    // Basic file size validation (e.g., 5MB limit)\n    const maxSizeInBytes = 5 * 1024 * 1024; // 5MB\n    if (file.size > maxSizeInBytes) {\n      return NextResponse.json({ message: `File too large. Maximum size is ${maxSizeInBytes / (1024*1024)}MB.` }, { status: 400 });\n    }\n\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n\n    // Generate a unique filename to prevent overwrites\n    const uniqueFilename = `${generateId('gcsfile_')}-${file.name.replace(/\\s+/g, '_')}`;\n    \n    const bucket = storage.bucket(GCS_BUCKET_NAME);\n    const gcsFile = bucket.file(uniqueFilename);\n\n    await gcsFile.save(buffer, {\n      metadata: {\n        contentType: file.type,\n      },\n      // To make the file publicly readable (if your bucket permissions allow)\n      // public: true, // This makes the individual object public upon upload\n      // resumable: false, // Optional: set to false for smaller files if preferred\n    });\n    \n    // IMPORTANT: Ensure your bucket or the specific object has public read access\n    // if you intend to use this direct URL format.\n    // Otherwise, you'd need to generate signed URLs.\n    // If you set `public: true` above AND your bucket allows public access, this URL should work.\n    const publicUrl = `https://storage.googleapis.com/${GCS_BUCKET_NAME}/${uniqueFilename}`;\n\n    console.log(`File ${file.name} uploaded to ${GCS_BUCKET_NAME}/${uniqueFilename}. Public URL: ${publicUrl}`);\n\n    return NextResponse.json({ \n        message: \"File uploaded successfully to GCS\", \n        imageUrl: publicUrl, // Keep parameter name as imageUrl for client consistency\n        fileName: uniqueFilename // Return the GCS filename\n    }, { status: 201 });\n\n  } catch (error) {\n    console.error('GCS File upload error:', error);\n    // Check if error is from GCS and provide more specific feedback if possible\n    if (error instanceof Error && 'code' in error && error.code === 403) {\n         return NextResponse.json({ message: \"Permission denied. Check GCS bucket/service account permissions.\" }, { status: 403 });\n    }\n    return NextResponse.json({ message: \"An unexpected error occurred during file upload to GCS\" }, { status: 500 });\n  }\n}\n\n    "],"names":[],"mappings":"AACA,oCAAoC;;;;AACpC;AAEA;AAAA;AACA,0NAAiD,kCAAkC;;;;AAEnF,gCAAgC;AAChC,iGAAiG;AACjG,IAAI;AACJ,IAAI;IACF,UAAU,IAAI,gLAAA,CAAA,UAAO;AACvB,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,qDAAqD;AACnE,qEAAqE;AACrE,uDAAuD;AACzD;AAGA,MAAM,kBAAkB,QAAQ,GAAG,CAAC,eAAe;AAE5C,eAAe,KAAK,OAAoB;IAC7C,IAAI,CAAC,SAAS;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA+C,GAAG;YAAE,QAAQ;QAAI;IACtG;IACA,IAAI,CAAC,iBAAiB;QACpB,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAmD,GAAG;YAAE,QAAQ;QAAI;IAC1G;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAEA,+BAA+B;QAC/B,MAAM,eAAe;YACjB;YACA;YACA;YACA;YACA;SACH;QACD,IAAI,CAAC,aAAa,QAAQ,CAAC,KAAK,IAAI,GAAG;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS,CAAC,mBAAmB,EAAE,KAAK,IAAI,CAAC,0CAA0C,CAAC;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACnI;QAEA,+CAA+C;QAC/C,MAAM,iBAAiB,IAAI,OAAO,MAAM,MAAM;QAC9C,IAAI,KAAK,IAAI,GAAG,gBAAgB;YAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS,CAAC,gCAAgC,EAAE,iBAAiB,CAAC,OAAK,IAAI,EAAE,GAAG,CAAC;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAC5H;QAEA,MAAM,QAAQ,MAAM,KAAK,WAAW;QACpC,MAAM,SAAS,OAAO,IAAI,CAAC;QAE3B,mDAAmD;QACnD,MAAM,iBAAiB,GAAG,CAAA,GAAA,4HAAA,CAAA,aAAU,AAAD,EAAE,YAAY,CAAC,EAAE,KAAK,IAAI,CAAC,OAAO,CAAC,QAAQ,MAAM;QAEpF,MAAM,SAAS,QAAQ,MAAM,CAAC;QAC9B,MAAM,UAAU,OAAO,IAAI,CAAC;QAE5B,MAAM,QAAQ,IAAI,CAAC,QAAQ;YACzB,UAAU;gBACR,aAAa,KAAK,IAAI;YACxB;QAIF;QAEA,8EAA8E;QAC9E,+CAA+C;QAC/C,iDAAiD;QACjD,8FAA8F;QAC9F,MAAM,YAAY,CAAC,+BAA+B,EAAE,gBAAgB,CAAC,EAAE,gBAAgB;QAEvF,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,aAAa,EAAE,gBAAgB,CAAC,EAAE,eAAe,cAAc,EAAE,WAAW;QAE1G,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT,UAAU;YACV,UAAU,eAAe,0BAA0B;QACvD,GAAG;YAAE,QAAQ;QAAI;IAEnB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,4EAA4E;QAC5E,IAAI,iBAAiB,SAAS,UAAU,SAAS,MAAM,IAAI,KAAK,KAAK;YAChE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAmE,GAAG;gBAAE,QAAQ;YAAI;QAC7H;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAyD,GAAG;YAAE,QAAQ;QAAI;IAChH;AACF","debugId":null}}]
}