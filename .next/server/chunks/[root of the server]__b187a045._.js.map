{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mockData.ts"],"sourcesContent":["import type { Patient, Appointment, TreatmentPlan, ProgressNote, StaffMember, Invoice } from './types';\n\nexport const mockPatients: Patient[] = [\n  { id: 'pat1', name: 'Alice Wonderland', email: 'alice@example.com', dateOfBirth: '1990-05-15', phone: '555-0101' },\n  { id: 'pat2', name: 'Bob The Builder', email: 'bob@example.com', dateOfBirth: '1985-11-20', phone: '555-0102' },\n  { id: 'pat3', name: 'Charlie Brown', email: 'charlie@example.com', dateOfBirth: '2000-01-30', phone: '555-0103' },\n];\n\nexport const mockStaff: StaffMember[] = [\n  { id: 'doc1', name: 'Dr. Loji', role: 'Dentist', email: 'drloji@example.com' },\n  { id: 'staff1', name: 'Sarah Miller', role: 'Receptionist', email: 'sarah@example.com' },\n  { id: 'hyg1', name: 'Mike Ross', role: 'Hygienist', email: 'mike@example.com' },\n];\n\nexport const mockAppointments: Appointment[] = [\n  { id: 'apt1', patientId: 'pat1', patientName: 'Alice Wonderland', doctorId: 'doc1', doctorName: 'Dr. Loji', date: new Date().toISOString().split('T')[0], time: '10:00 AM', type: 'Check-up', status: 'Scheduled' },\n  { id: 'apt2', patientId: 'pat2', patientName: 'Bob The Builder', doctorId: 'doc1', doctorName: 'Dr. Loji', date: new Date(Date.now() + 86400000).toISOString().split('T')[0], time: '02:30 PM', type: 'Cleaning', status: 'Confirmed' },\n  { id: 'apt3', patientId: 'pat1', patientName: 'Alice Wonderland', doctorId: 'doc1', doctorName: 'Dr. Loji', date: new Date(Date.now() - 86400000 * 5).toISOString().split('T')[0], time: '09:00 AM', type: 'Filling', status: 'Completed' },\n];\n\nexport const mockTreatmentPlans: TreatmentPlan[] = [\n  {\n    id: 'tp1',\n    patientId: 'pat1',\n    doctorId: 'doc1',\n    title: 'Comprehensive Oral Care Plan',\n    procedures: [\n      { id: 'proc1', name: 'Full Mouth X-Ray', cost: 150 },\n      { id: 'proc2', name: 'Deep Cleaning (Scaling & Root Planing)', cost: 400 },\n      { id: 'proc3', name: 'Fluoride Treatment', cost: 50 },\n    ],\n    startDate: new Date(Date.now() - 86400000 * 10).toISOString().split('T')[0],\n    status: 'Active',\n    totalCost: 600,\n  },\n  {\n    id: 'tp2',\n    patientId: 'pat2',\n    doctorId: 'doc1',\n    title: 'Implant Placement - Phase 1',\n    procedures: [{ id: 'proc4', name: 'Dental Implant Surgery (Single Tooth)', cost: 2000 }],\n    startDate: new Date().toISOString().split('T')[0],\n    status: 'Active',\n    totalCost: 2000,\n  },\n];\n\nexport const mockProgressNotes: ProgressNote[] = [\n  {\n    id: 'pn1',\n    patientId: 'pat1',\n    treatmentPlanId: 'tp1',\n    doctorId: 'doc1',\n    date: new Date(Date.now() - 86400000 * 9).toISOString().split('T')[0],\n    time: '10:30 AM',\n    note: 'Initial consultation. Discussed treatment plan. Patient agreeable. Full mouth X-rays taken.',\n    images: [{ id: 'img1', url: 'https://placehold.co/300x200.png', caption: 'X-Ray Left Side' }],\n    progressStage: 'Initial Assessment',\n  },\n  {\n    id: 'pn2',\n    patientId: 'pat1',\n    treatmentPlanId: 'tp1',\n    doctorId: 'doc1',\n    date: new Date(Date.now() - 86400000 * 2).toISOString().split('T')[0],\n    time: '11:00 AM',\n    note: 'Deep cleaning performed on upper quadrant. Patient tolerated well. Advised on post-op care.',\n    progressStage: 'Procedure Day 1',\n  },\n];\n\nexport const mockInvoices: Invoice[] = [\n    { \n        id: 'inv1', \n        patientId: 'pat1', \n        date: new Date(Date.now() - 86400000 * 10).toISOString().split('T')[0], \n        dueDate: new Date(Date.now() + 86400000 * 20).toISOString().split('T')[0],\n        items: [\n            { description: 'Full Mouth X-Ray', quantity: 1, unitPrice: 150, totalPrice: 150 },\n            { description: 'Deep Cleaning (Scaling & Root Planing)', quantity: 1, unitPrice: 400, totalPrice: 400 },\n        ], \n        totalAmount: 550, \n        amountPaid: 200, \n        status: 'Partial' \n    },\n    { \n        id: 'inv2', \n        patientId: 'pat2', \n        date: new Date().toISOString().split('T')[0], \n        dueDate: new Date(Date.now() + 86400000 * 30).toISOString().split('T')[0],\n        items: [\n            { description: 'Dental Implant Surgery (Single Tooth) - Deposit', quantity: 1, unitPrice: 1000, totalPrice: 1000 },\n        ], \n        totalAmount: 1000, \n        amountPaid: 0, \n        status: 'Pending' \n    },\n];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/mockServerDb.ts"],"sourcesContent":["\n// src/lib/mockServerDb.ts\nimport type { Appointment, TreatmentPlan, ProgressNote, Invoice, StaffMember, PaymentTransaction, Conversation, Message, Patient as PatientType } from './types';\nimport {\n  mockAppointments as initialAppointments,\n  mockTreatmentPlans as initialTreatmentPlans,\n  mockProgressNotes as initialProgressNotes,\n  mockInvoices as initialInvoices,\n  mockStaff as initialStaffCollection, // Renamed to avoid conflict\n  mockPatients as initialPatients\n} from './mockData';\nimport type { NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';\n\nexport interface UserAuth {\n  id: string;\n  name: string;\n  email: string;\n  passwordHash?: string;\n  role: 'patient' | 'doctor' | 'staff' | 'hygienist' | 'admin' | 'assistant';\n  resetToken?: string;\n  resetTokenExpiry?: Date;\n  dateOfBirth?: string;\n  phone?: string;\n  age?: number;\n  medicalRecords?: string;\n  xrayImageUrls?: string[];\n  hasDiabetes?: boolean;\n  hasHighBloodPressure?: boolean;\n  hasStrokeOrHeartAttackHistory?: boolean;\n  hasBleedingDisorders?: boolean;\n  hasAllergy?: boolean;\n  allergySpecifics?: string;\n  hasAsthma?: boolean;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport function generateId(prefix: string = 'id_') {\n  return prefix + Date.now().toString(36) + Math.random().toString(36).substring(2, 7);\n}\n\nlet users: UserAuth[] = [];\n\ninitialStaffCollection.forEach(staffMember => {\n  let userAuthRole: UserAuth['role'] = 'staff';\n  if (staffMember.role === 'Dentist') userAuthRole = 'doctor';\n  else if (staffMember.role === 'Hygienist') userAuthRole = 'hygienist';\n  else if (staffMember.role === 'Assistant') userAuthRole = 'assistant';\n  else if (staffMember.role === 'Admin') userAuthRole = 'admin';\n\n  users.push({\n    id: staffMember.id,\n    name: staffMember.name,\n    email: staffMember.email,\n    role: userAuthRole,\n    passwordHash: `$2a$10$mockPasswordFor${staffMember.id}`,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  });\n});\n\ninitialPatients.forEach(patient => {\n  users.push({\n    id: patient.id,\n    name: patient.name,\n    email: patient.email,\n    role: 'patient',\n    phone: patient.phone,\n    dateOfBirth: patient.dateOfBirth,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  });\n});\n\n\nlet appointments: Appointment[] = JSON.parse(JSON.stringify(initialAppointments));\nlet treatmentPlans: TreatmentPlan[] = JSON.parse(JSON.stringify(initialTreatmentPlans));\nlet progressNotes: ProgressNote[] = JSON.parse(JSON.stringify(initialProgressNotes));\nlet invoices: Invoice[] = JSON.parse(JSON.stringify(initialInvoices));\n// Removed: let staff: StaffMember[] = JSON.parse(JSON.stringify(initialStaff));\nlet paymentTransactions: PaymentTransaction[] = [];\nlet clinicWaitTime = { text: \"<10 mins\", updatedAt: new Date().toISOString() };\n\n// Mock conversations and messages\nlet conversations: Conversation[] = [\n  {\n    id: 'convo1',\n    patientId: 'pat1',\n    staffId: 'staff1', \n    patientName: initialPatients.find(p => p.id === 'pat1')?.name,\n    patientAvatarUrl: `https://placehold.co/40x40.png?text=${initialPatients.find(p => p.id === 'pat1')?.name?.charAt(0)}`,\n    lastMessageText: \"Hi, can I reschedule my appointment?\",\n    lastMessageTimestamp: new Date(Date.now() - 3600000 * 2).toISOString(), \n    unreadCountForStaff: 1,\n  },\n  {\n    id: 'convo2',\n    patientId: 'pat2',\n    staffId: 'staff1',\n    patientName: initialPatients.find(p => p.id === 'pat2')?.name,\n    patientAvatarUrl: `https://placehold.co/40x40.png?text=${initialPatients.find(p => p.id === 'pat2')?.name?.charAt(0)}`,\n    lastMessageText: \"Thank you for the reminder!\",\n    lastMessageTimestamp: new Date(Date.now() - 86400000).toISOString(), \n    unreadCountForStaff: 0,\n  },\n  {\n    id: 'convo3',\n    patientId: 'pat3',\n    staffId: 'staff1',\n    patientName: initialPatients.find(p => p.id === 'pat3')?.name,\n    patientAvatarUrl: `https://placehold.co/40x40.png?text=${initialPatients.find(p => p.id === 'pat3')?.name?.charAt(0)}`,\n    lastMessageText: \"Is parking available at the clinic?\",\n    lastMessageTimestamp: new Date(Date.now() - 86400000 * 2).toISOString(), \n    unreadCountForStaff: 1,\n  }\n];\n\nlet messages: Message[] = [\n  {\n    id: generateId('msg_'),\n    conversationId: 'convo1',\n    senderId: 'pat1',\n    senderRole: 'patient',\n    text: \"Hi, can I reschedule my appointment scheduled for tomorrow?\",\n    timestamp: new Date(Date.now() - 3600000 * 2 - 60000).toISOString(), \n  },\n  {\n    id: generateId('msg_'),\n    conversationId: 'convo1',\n    senderId: 'staff1', \n    senderRole: 'staff',\n    text: \"Hello Alice, certainly! Which day and time would work best for you?\",\n    timestamp: new Date(Date.now() - 3600000 * 2).toISOString(), \n  },\n  {\n    id: generateId('msg_'),\n    conversationId: 'convo2',\n    senderId: 'staff1',\n    senderRole: 'staff',\n    text: \"Hi Bob, just a friendly reminder about your appointment tomorrow at 2:30 PM.\",\n    timestamp: new Date(Date.now() - 86400000 - 3600000).toISOString(), \n  },\n  {\n    id: generateId('msg_'),\n    conversationId: 'convo2',\n    senderId: 'pat2',\n    senderRole: 'patient',\n    text: \"Thank you for the reminder!\",\n    timestamp: new Date(Date.now() - 86400000).toISOString(), \n  },\n   {\n    id: generateId('msg_'),\n    conversationId: 'convo3',\n    senderId: 'pat3',\n    senderRole: 'patient',\n    text: \"Is parking available at the clinic?\",\n    timestamp: new Date(Date.now() - 86400000 * 2).toISOString(), \n  }\n];\n\n\nexport const db = {\n  users,\n  appointments,\n  treatmentPlans,\n  progressNotes,\n  invoices,\n  clinicWaitTime,\n  // staff, // Removed staff from here\n  paymentTransactions,\n  conversations,\n  messages,\n};\n\n\nexport async function authorize(req: NextRequest, requiredRole?: UserAuth['role'] | UserAuth['role'][]) {\n  const mockSessionToken = req.cookies.get('sessionToken')?.value;\n  if (!mockSessionToken) {\n    return { authorized: false, user: null, error: NextResponse.json({ message: 'Unauthorized: No session token' }, { status: 401 }) };\n  }\n  const [userIdFromToken, userRoleFromToken] = mockSessionToken.split(':');\n  const user = db.users.find(u => u.id === userIdFromToken);\n\n  if (!user) {\n    return { authorized: false, user: null, error: NextResponse.json({ message: 'Unauthorized: Invalid session' }, { status: 401 }) };\n  }\n\n  const rolesToCheck = Array.isArray(requiredRole) ? requiredRole : (requiredRole ? [requiredRole] : []);\n\n  if (rolesToCheck.length > 0 && !rolesToCheck.includes(user.role)) {\n    return { authorized: false, user: null, error: NextResponse.json({ message: 'Forbidden: Insufficient permissions' }, { status: 403 }) };\n  }\n  return { authorized: true, user: user, error: null };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/conversations/route.ts"],"sourcesContent":["\n// src/app/api/conversations/route.ts\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { db, generateId, authorize } from '@/lib/mockServerDb';\nimport type { Conversation } from '@/lib/types';\n\n// GET /api/conversations - Fetches a list of conversations for staff\nexport async function GET(request: NextRequest) {\n  // TODO: Add authorization - ensure only staff can access\n  // const authResult = await authorize(request, ['staff', 'admin', 'doctor']);\n  // if (!authResult.authorized || !authResult.user) {\n  //   return authResult.error;\n  // }\n\n  // Enrich conversation data with patient details\n  const enrichedConversations = db.conversations.map(convo => {\n    const patient = db.users.find(u => u.id === convo.patientId && u.role === 'patient');\n    return {\n      ...convo,\n      patientName: patient?.name || convo.patientName || 'Unknown Patient',\n      // Assuming a placeholder or logic to generate avatar URL if not stored directly\n      patientAvatarUrl: convo.patientAvatarUrl || `https://placehold.co/40x40.png?text=${patient?.name?.charAt(0) || 'P'}`,\n    };\n  }).sort((a, b) => {\n    // Sort by last message timestamp, newest first\n    if (a.lastMessageTimestamp && b.lastMessageTimestamp) {\n      return new Date(b.lastMessageTimestamp).getTime() - new Date(a.lastMessageTimestamp).getTime();\n    }\n    if (a.lastMessageTimestamp) return -1; // a comes first if b has no timestamp\n    if (b.lastMessageTimestamp) return 1;  // b comes first if a has no timestamp\n    return 0;\n  });\n\n  return NextResponse.json(enrichedConversations, { status: 200 });\n}\n\n// POST /api/conversations - (Optional) Allows staff to initiate a new conversation\n// For now, this is a placeholder. In a real app, you'd ensure a conversation\n// isn't duplicated if one already exists for the patient.\nexport async function POST(request: NextRequest) {\n  // const authResult = await authorize(request, ['staff', 'admin', 'doctor']);\n  // if (!authResult.authorized || !authResult.user) {\n  //   return authResult.error;\n  // }\n  // const staffUserId = authResult.user.id;\n\n  try {\n    const body = await request.json();\n    const { patientId, initialMessageText, staffId } = body; // staffId could be passed or taken from auth user\n\n    if (!patientId) {\n      return NextResponse.json({ message: \"Patient ID is required to start a conversation\" }, { status: 400 });\n    }\n\n    const patient = db.users.find(u => u.id === patientId && u.role === 'patient');\n    if (!patient) {\n      return NextResponse.json({ message: \"Patient not found\" }, { status: 404 });\n    }\n    \n    // Check if a conversation already exists for this patient\n    const existingConversation = db.conversations.find(c => c.patientId === patientId);\n    if (existingConversation) {\n        return NextResponse.json(existingConversation, { status: 200 }); // Return existing conversation\n    }\n\n\n    const newConversationId = generateId('convo_');\n    const newConversation: Conversation = {\n      id: newConversationId,\n      patientId,\n      staffId: staffId || 'staff_generic', // Or logged-in staff user ID\n      patientName: patient.name,\n      patientAvatarUrl: `https://placehold.co/40x40.png?text=${patient.name.charAt(0)}`,\n      lastMessageTimestamp: new Date().toISOString(),\n      unreadCountForStaff: initialMessageText ? 1 : 0,\n    };\n\n    if (initialMessageText) {\n      newConversation.lastMessageText = initialMessageText;\n      const newMessage = {\n        id: generateId('msg_'),\n        conversationId: newConversationId,\n        senderId: staffId || 'staff_generic', \n        senderRole: 'staff' as 'staff',\n        text: initialMessageText,\n        timestamp: newConversation.lastMessageTimestamp!,\n      };\n      db.messages.push(newMessage);\n    }\n\n    db.conversations.push(newConversation);\n    return NextResponse.json(newConversation, { status: 201 });\n\n  } catch (error) {\n    console.error('Error creating conversation:', error);\n    return NextResponse.json({ message: 'Error creating conversation' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}