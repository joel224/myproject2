{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\n// Import Firebase Authentication and Firestore\n// Import the functions you need from the SDKs you need\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBILbVUhDwe1obMxVjkXe4C0hc46Okd9i8\",\n  authDomain: \"dr-lojis-dental-hub.firebaseapp.com\",\n  projectId: \"dr-lojis-dental-hub\",\n  storageBucket: \"dr-lojis-dental-hub.firebasestorage.app\",\n  messagingSenderId: \"808558558636\",\n  appId: \"1:808558558636:web:4b89f3a129a46a0fc3ce09\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Get references to the services\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\n// Export the services so they can be used in other files\nexport { auth, db, app };\n"],"names":[],"mappings":"AACA,+CAA+C;AAC/C,uDAAuD;;;;;;AACvD;AAAA;AACA;AAAA;AACA;AAAA;;;;AACA,4DAA4D;AAC5D,iEAAiE;AAEjE,wCAAwC;AACxC,MAAM,iBAAiB;IACrB,QAAQ;IACR,YAAY;IACZ,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;AACT;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAA,GAAA,sLAAA,CAAA,gBAAa,AAAD,EAAE;AAE1B,iCAAiC;AACjC,MAAM,OAAO,CAAA,GAAA,2OAAA,CAAA,UAAO,AAAD,EAAE;AACrB,MAAM,KAAK,CAAA,GAAA,mKAAA,CAAA,eAAY,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/patients/route.ts"],"sourcesContent":["\n// src/app/api/patients/route.ts\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { z } from 'zod';\nimport { db as firestoreDb } from '@/lib/firebase'; // Use actual Firestore instance\nimport { collection, getDocs, addDoc, query, where, serverTimestamp } from 'firebase/firestore';\nimport type { Patient } from '@/lib/types';\nimport type { UserAuth } from '@/lib/mockServerDb'; // For UserAuth type\n\n// Schema for creating a new patient profile in Firestore's 'users' collection\nconst createPatientSchema = z.object({\n  name: z.string().min(2, \"Name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().optional(),\n  dateOfBirth: z.string().optional(), // ISO date string e.g. \"YYYY-MM-DD\"\n  age: z.number().int().min(0).optional(),\n  medicalRecords: z.string().optional(),\n  xrayImageUrls: z.array(z.string().url()).optional().default([]),\n  hasDiabetes: z.boolean().optional().default(false),\n  hasHighBloodPressure: z.boolean().optional().default(false),\n  hasStrokeOrHeartAttackHistory: z.boolean().optional().default(false),\n  hasBleedingDisorders: z.boolean().optional().default(false),\n  hasAllergy: z.boolean().optional().default(false),\n  allergySpecifics: z.string().optional(),\n  hasAsthma: z.boolean().optional().default(false),\n  // Password field removed from staff creation API, should be handled via auth flows\n});\n\n/**\n * Handles GET requests to /api/patients - Fetches patients from Firestore\n * @param request - The incoming NextRequest object\n * @returns A NextResponse object containing a list of patients or an error.\n */\nexport async function GET(request: NextRequest) {\n  // TODO: Add proper authorization check using Firebase Auth context if needed for staff access\n  try {\n    const usersCollectionRef = collection(firestoreDb, 'users');\n    const q = query(usersCollectionRef, where('role', '==', 'patient'));\n    const querySnapshot = await getDocs(q);\n\n    const patientsList: Patient[] = [];\n    querySnapshot.forEach((doc) => {\n      const data = doc.data() as UserAuth; // UserAuth contains all patient fields\n      patientsList.push({\n        id: doc.id, // Use Firestore document ID\n        name: data.name,\n        email: data.email,\n        phone: data.phone,\n        dateOfBirth: data.dateOfBirth,\n        age: data.age,\n        medicalRecords: data.medicalRecords,\n        xrayImageUrls: data.xrayImageUrls || [],\n        hasDiabetes: data.hasDiabetes,\n        hasHighBloodPressure: data.hasHighBloodPressure,\n        hasStrokeOrHeartAttackHistory: data.hasStrokeOrHeartAttackHistory,\n        hasBleedingDisorders: data.hasBleedingDisorders,\n        hasAllergy: data.hasAllergy,\n        allergySpecifics: data.allergySpecifics,\n        hasAsthma: data.hasAsthma,\n      });\n    });\n    return NextResponse.json(patientsList, { status: 200 });\n  } catch (error) {\n    console.error('Error fetching patients from Firestore:', error);\n    return NextResponse.json({ message: 'Error fetching patients' }, { status: 500 });\n  }\n}\n\n/**\n * Handles POST requests to /api/patients to create a new patient in Firestore.\n * @param request - The incoming NextRequest object\n * @returns A NextResponse object containing the new patient or an error.\n */\nexport async function POST(request: NextRequest) {\n  // TODO: Add proper authorization check for staff\n  try {\n    const body = await request.json();\n    const validation = createPatientSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json({ message: \"Validation failed\", errors: validation.error.flatten().fieldErrors }, { status: 400 });\n    }\n\n    const patientData = validation.data;\n\n    // Check if email already exists\n    const usersCollectionRef = collection(firestoreDb, 'users');\n    const q = query(usersCollectionRef, where('email', '==', patientData.email));\n    const existingUserSnapshot = await getDocs(q);\n\n    if (!existingUserSnapshot.empty) {\n      return NextResponse.json({ message: \"A user with this email already exists.\" }, { status: 409 });\n    }\n\n    const newPatientDoc: Omit<UserAuth, 'id' | 'passwordHash'> = {\n      ...patientData,\n      role: 'patient',\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n      // Ensure optional fields are handled if not present in patientData\n      phone: patientData.phone || undefined,\n      dateOfBirth: patientData.dateOfBirth || undefined,\n      age: patientData.age || undefined,\n      medicalRecords: patientData.medicalRecords || undefined,\n      xrayImageUrls: patientData.xrayImageUrls || [],\n      hasDiabetes: patientData.hasDiabetes || false,\n      hasHighBloodPressure: patientData.hasHighBloodPressure || false,\n      hasStrokeOrHeartAttackHistory: patientData.hasStrokeOrHeartAttackHistory || false,\n      hasBleedingDisorders: patientData.hasBleedingDisorders || false,\n      hasAllergy: patientData.hasAllergy || false,\n      allergySpecifics: patientData.hasAllergy ? (patientData.allergySpecifics || undefined) : undefined,\n      hasAsthma: patientData.hasAsthma || false,\n    };\n\n    const docRef = await addDoc(usersCollectionRef, newPatientDoc);\n\n    const newPatient: Patient = {\n      id: docRef.id,\n      ...patientData, // Spread validated data, ensuring all fields are present\n    };\n\n    return NextResponse.json(newPatient, { status: 201 });\n\n  } catch (error) {\n    console.error('Error creating patient in Firestore:', error);\n    return NextResponse.json({ message: 'Error creating patient' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}